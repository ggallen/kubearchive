# Default values for kn-api-server-source.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

---
# template values relevant to all of kubearchive
kubearchive:
  # the name of the namespace to deploy kubearchive into
  namespace: "kubearchive"
  # RoleBinding name
  roleBinding: "kubearchive"
  # Name of Service Account
  serviceAccount: "kubearchive"
  # namespaces that kubearchive will watch for archivable resources with their configuration
  watchNamespaces:
    - name: test
      # if true, the namespace will be created
      create: true
      # values used to create the Role in the namespace
      role:
        name: "kubearchive"
        # rules give the service account used by ApiServerSource ability to watch specific resources
        # on the cluster.
        rules:
          # the API group the resources are a part of. "" indicates the core API group
          - apiGroups:
            - ""       # yamllint disable-line rule:indentation
            # resources that the role gives permission to
            resources:
              - events
            # actions on the resource that the role gives permissions to
            verbs:
              - get
              - list
              - watch
      # values used to create a knative-eventing ApiServerSource
      apiServerSource:
        name: "api-server-source"
        # can be Resource or Reference or Resource
        # Reference means that a reference to the resource is include in the cloud event
        # Resource means that the full resource is included in the cloud event
        mode: "Resource"
        resources:
          # apiVersion and kind of the resource that ApiServerSource should watch.
          # The list can contain more than one resource. Make sure that the Role provides
          # appropriate perms for the resources here.
          - apiVersion: v1
            kind: Event


# values used to create the api-server
apiServer:
  name: "{{ .Release.Name }}-api-server"
  # NOTE - Helm does not resolve the `ko` path. The path needs to be set on the `helm install` command.
  # For example:
  # helm install -n default <chart-name> charts/kubearchive \
  # --set-string apiServer.image=$(ko build github.com/kubearchive/kubearchive/cmd/api)
  image: ko://github.com/kubearchive/kubearchive/cmd/api
  # NOTE - To debug the apiServer the `ko build` command must be the following way:
  # KO_DEFAULTBASEIMAGE=gcr.io/k8s-skaffold/skaffold-debug-support/go:latest ko build --disable-optimizations \
  # github.com/kubearchive/kubearchive/cmd/api
  debug: false
  # If true, OpenTelemetry instrumentation will be enabled for the api server
  observability: false
  # NOTE - This resource must include the certificate suffix to work
  cert: "{{ tpl .Values.apiServer.name . }}-certificate"
  secret: "{{ tpl .Values.apiServer.name . }}-tls"
  port: 8081
  testSA: "{{ .Release.Name }}-test"

# values used to create a sink
sink:
  name: "kubearchive-sink"
  # NOTE - Helm does not resolve the `ko` path. The path needs to be set on the `helm install` command.
  # For example:
  # helm install -n default <chart-name> charts/kubearchive \
  # --set-string apiServer.image=$(ko build github.com/kubearchive/kubearchive/cmd/sink)
  image: ko://github.com/kubearchive/kubearchive/cmd/sink
  protocol: TCP
  port: 80
  # 8080 is the port that the cloud events sdk uses by default when listening for events
  targetPort: 8080
  # number of kubearchive sink pods that should be deployed
  replicas: 1
  # If true, OpenTelemetry instrumentation will be enabled for the sink
  observability: false

operator:
  image: "quay.io/kubearchive/kubearchive-operator:latest"

# values used to create a PostgreSQL database
database:
  name: "postgresql"
  # number of database pods that should be deployed
  replicaCount: 1
  # database container image
  image:
    repository: postgres
    pullPolicy: IfNotPresent
    tag: "16"
  # database volumes
  volumes:
    name: ""
    storage: "5Gi"
  # database service
  service:
    type: NodePort
    port: 5432
  # database basic configuration
  postgresData:
    # database name
    dbName: ""
    # database user
    dbUser: ""
    # database password
    dbPassword: ""
